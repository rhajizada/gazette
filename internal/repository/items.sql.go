// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: items.sql

package repository

import (
	"context"
	"time"

	"github.com/google/uuid"
	gofeed "github.com/mmcdole/gofeed"
	typeext "github.com/rhajizada/gazette/internal/typeext"
)

const countItemsByFeedID = `-- name: CountItemsByFeedID :one
SELECT COUNT(*) AS count
FROM items
WHERE feed_id = $1
`

func (q *Queries) CountItemsByFeedID(ctx context.Context, feedID uuid.UUID) (int64, error) {
	row := q.db.QueryRow(ctx, countItemsByFeedID, feedID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createItem = `-- name: CreateItem :one
INSERT INTO items
  (feed_id, title, description, content, link, links, updated_parsed, published_parsed,
   authors, guid, image, categories, enclosures)
VALUES
  ($1, $2, $3, $4, $5, $6, $7, $8,
   $9, $10, $11, $12, $13)
RETURNING
  id, feed_id, title, description, content, link, links, updated_parsed, published_parsed,
  authors, guid, image, categories, enclosures, created_at, updated_at
`

type CreateItemParams struct {
	FeedID          uuid.UUID          `json:"feedId"`
	Title           *string            `json:"title"`
	Description     *string            `json:"description"`
	Content         *string            `json:"content"`
	Link            string             `json:"link"`
	Links           []string           `json:"links"`
	UpdatedParsed   *time.Time         `json:"updatedParsed"`
	PublishedParsed *time.Time         `json:"publishedParsed"`
	Authors         typeext.Authors    `json:"authors"`
	Guid            *string            `json:"guid"`
	Image           *gofeed.Image      `json:"image"`
	Categories      []string           `json:"categories"`
	Enclosures      typeext.Enclosures `json:"enclosures"`
}

func (q *Queries) CreateItem(ctx context.Context, arg CreateItemParams) (Item, error) {
	row := q.db.QueryRow(ctx, createItem,
		arg.FeedID,
		arg.Title,
		arg.Description,
		arg.Content,
		arg.Link,
		arg.Links,
		arg.UpdatedParsed,
		arg.PublishedParsed,
		arg.Authors,
		arg.Guid,
		arg.Image,
		arg.Categories,
		arg.Enclosures,
	)
	var i Item
	err := row.Scan(
		&i.ID,
		&i.FeedID,
		&i.Title,
		&i.Description,
		&i.Content,
		&i.Link,
		&i.Links,
		&i.UpdatedParsed,
		&i.PublishedParsed,
		&i.Authors,
		&i.Guid,
		&i.Image,
		&i.Categories,
		&i.Enclosures,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteItemByID = `-- name: DeleteItemByID :exec
DELETE FROM items WHERE id = $1
`

func (q *Queries) DeleteItemByID(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteItemByID, id)
	return err
}

const getItemByID = `-- name: GetItemByID :one
SELECT
  id, feed_id, title, description, content, link, links, updated_parsed, published_parsed,
  authors, guid, image, categories, enclosures, created_at, updated_at
FROM items
WHERE id = $1
`

func (q *Queries) GetItemByID(ctx context.Context, id uuid.UUID) (Item, error) {
	row := q.db.QueryRow(ctx, getItemByID, id)
	var i Item
	err := row.Scan(
		&i.ID,
		&i.FeedID,
		&i.Title,
		&i.Description,
		&i.Content,
		&i.Link,
		&i.Links,
		&i.UpdatedParsed,
		&i.PublishedParsed,
		&i.Authors,
		&i.Guid,
		&i.Image,
		&i.Categories,
		&i.Enclosures,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getLastItem = `-- name: GetLastItem :one
SELECT
  id, feed_id, title, description, content, link, links,
  updated_parsed, published_parsed, authors, guid, image,
  categories, enclosures, created_at, updated_at
FROM items
WHERE feed_id = $1
ORDER BY created_at DESC
LIMIT 1
`

func (q *Queries) GetLastItem(ctx context.Context, feedID uuid.UUID) (Item, error) {
	row := q.db.QueryRow(ctx, getLastItem, feedID)
	var i Item
	err := row.Scan(
		&i.ID,
		&i.FeedID,
		&i.Title,
		&i.Description,
		&i.Content,
		&i.Link,
		&i.Links,
		&i.UpdatedParsed,
		&i.PublishedParsed,
		&i.Authors,
		&i.Guid,
		&i.Image,
		&i.Categories,
		&i.Enclosures,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listItemsByFeedID = `-- name: ListItemsByFeedID :many
SELECT
  id, feed_id, title, description, content, link, links, updated_parsed, published_parsed,
  authors, guid, image, categories, enclosures, created_at, updated_at
FROM items
WHERE feed_id = $1
ORDER BY published_parsed DESC
LIMIT  $2
OFFSET $3
`

type ListItemsByFeedIDParams struct {
	FeedID uuid.UUID `json:"feedId"`
	Limit  int32     `json:"limit"`
	Offset int32     `json:"offset"`
}

func (q *Queries) ListItemsByFeedID(ctx context.Context, arg ListItemsByFeedIDParams) ([]Item, error) {
	rows, err := q.db.Query(ctx, listItemsByFeedID, arg.FeedID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Item
	for rows.Next() {
		var i Item
		if err := rows.Scan(
			&i.ID,
			&i.FeedID,
			&i.Title,
			&i.Description,
			&i.Content,
			&i.Link,
			&i.Links,
			&i.UpdatedParsed,
			&i.PublishedParsed,
			&i.Authors,
			&i.Guid,
			&i.Image,
			&i.Categories,
			&i.Enclosures,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateItemByID = `-- name: UpdateItemByID :one
UPDATE items
SET
  title            = $2,
  description      = $3,
  content          = $4,
  link             = $5,
  links            = $6,
  updated_parsed   = $7,
  published_parsed = $8,
  authors          = $9,
  guid             = $10,
  image            = $11,
  categories       = $12,
  enclosures       = $13,
  updated_at       = now()
WHERE id = $1
RETURNING
  id, feed_id, title, description, content, link, links, updated_parsed, published_parsed,
  authors, guid, image, categories, enclosures, created_at, updated_at
`

type UpdateItemByIDParams struct {
	ID              uuid.UUID          `json:"id"`
	Title           *string            `json:"title"`
	Description     *string            `json:"description"`
	Content         *string            `json:"content"`
	Link            string             `json:"link"`
	Links           []string           `json:"links"`
	UpdatedParsed   *time.Time         `json:"updatedParsed"`
	PublishedParsed *time.Time         `json:"publishedParsed"`
	Authors         typeext.Authors    `json:"authors"`
	Guid            *string            `json:"guid"`
	Image           *gofeed.Image      `json:"image"`
	Categories      []string           `json:"categories"`
	Enclosures      typeext.Enclosures `json:"enclosures"`
}

func (q *Queries) UpdateItemByID(ctx context.Context, arg UpdateItemByIDParams) (Item, error) {
	row := q.db.QueryRow(ctx, updateItemByID,
		arg.ID,
		arg.Title,
		arg.Description,
		arg.Content,
		arg.Link,
		arg.Links,
		arg.UpdatedParsed,
		arg.PublishedParsed,
		arg.Authors,
		arg.Guid,
		arg.Image,
		arg.Categories,
		arg.Enclosures,
	)
	var i Item
	err := row.Scan(
		&i.ID,
		&i.FeedID,
		&i.Title,
		&i.Description,
		&i.Content,
		&i.Link,
		&i.Links,
		&i.UpdatedParsed,
		&i.PublishedParsed,
		&i.Authors,
		&i.Guid,
		&i.Image,
		&i.Categories,
		&i.Enclosures,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
