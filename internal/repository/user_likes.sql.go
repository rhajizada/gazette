// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: user_likes.sql

package repository

import (
	"context"
	"time"

	"github.com/google/uuid"
	gofeed "github.com/mmcdole/gofeed"
	typeext "github.com/rhajizada/gazette/internal/typeext"
)

const createUserLike = `-- name: CreateUserLike :one
INSERT INTO user_likes (user_id, item_id)
VALUES ($1, $2)
RETURNING user_id, item_id, liked_at
`

type CreateUserLikeParams struct {
	UserID uuid.UUID `json:"userId"`
	ItemID uuid.UUID `json:"itemId"`
}

func (q *Queries) CreateUserLike(ctx context.Context, arg CreateUserLikeParams) (UserLike, error) {
	row := q.db.QueryRow(ctx, createUserLike, arg.UserID, arg.ItemID)
	var i UserLike
	err := row.Scan(&i.UserID, &i.ItemID, &i.LikedAt)
	return i, err
}

const deleteUserLike = `-- name: DeleteUserLike :exec
DELETE FROM user_likes
WHERE user_id = $1
  AND item_id = $2
`

type DeleteUserLikeParams struct {
	UserID uuid.UUID `json:"userId"`
	ItemID uuid.UUID `json:"itemId"`
}

func (q *Queries) DeleteUserLike(ctx context.Context, arg DeleteUserLikeParams) error {
	_, err := q.db.Exec(ctx, deleteUserLike, arg.UserID, arg.ItemID)
	return err
}

const getUserLike = `-- name: GetUserLike :one
SELECT user_id, item_id, liked_at
FROM user_likes
WHERE user_id = $1
  AND item_id = $2
`

type GetUserLikeParams struct {
	UserID uuid.UUID `json:"userId"`
	ItemID uuid.UUID `json:"itemId"`
}

func (q *Queries) GetUserLike(ctx context.Context, arg GetUserLikeParams) (UserLike, error) {
	row := q.db.QueryRow(ctx, getUserLike, arg.UserID, arg.ItemID)
	var i UserLike
	err := row.Scan(&i.UserID, &i.ItemID, &i.LikedAt)
	return i, err
}

const listUserLikesByItem = `-- name: ListUserLikesByItem :many
SELECT user_id, item_id, liked_at
FROM user_likes
WHERE item_id = $1
ORDER BY liked_at DESC
LIMIT  $2
OFFSET $3
`

type ListUserLikesByItemParams struct {
	ItemID uuid.UUID `json:"itemId"`
	Limit  int32     `json:"limit"`
	Offset int32     `json:"offset"`
}

func (q *Queries) ListUserLikesByItem(ctx context.Context, arg ListUserLikesByItemParams) ([]UserLike, error) {
	rows, err := q.db.Query(ctx, listUserLikesByItem, arg.ItemID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []UserLike
	for rows.Next() {
		var i UserLike
		if err := rows.Scan(&i.UserID, &i.ItemID, &i.LikedAt); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listUserLikesByUser = `-- name: ListUserLikesByUser :many
SELECT ul.user_id, ul.item_id, ul.liked_at, i.id, i.feed_id, i.title, i.description, i.content, i.link, i.links, i.updated_parsed, i.published_parsed, i.authors, i.guid, i.image, i.categories, i.enclosures, i.created_at, i.updated_at
FROM user_likes ul
JOIN items i    ON i.id = ul.item_id
WHERE ul.user_id = $1
ORDER BY ul.liked_at DESC
LIMIT  $2
OFFSET $3
`

type ListUserLikesByUserParams struct {
	UserID uuid.UUID `json:"userId"`
	Limit  int32     `json:"limit"`
	Offset int32     `json:"offset"`
}

type ListUserLikesByUserRow struct {
	UserID          uuid.UUID          `json:"userId"`
	ItemID          uuid.UUID          `json:"itemId"`
	LikedAt         time.Time          `json:"likedAt"`
	ID              uuid.UUID          `json:"id"`
	FeedID          uuid.UUID          `json:"feedId"`
	Title           *string            `json:"title"`
	Description     *string            `json:"description"`
	Content         *string            `json:"content"`
	Link            string             `json:"link"`
	Links           []string           `json:"links"`
	UpdatedParsed   *time.Time         `json:"updatedParsed"`
	PublishedParsed *time.Time         `json:"publishedParsed"`
	Authors         typeext.Authors    `json:"authors"`
	Guid            *string            `json:"guid"`
	Image           *gofeed.Image      `json:"image"`
	Categories      []string           `json:"categories"`
	Enclosures      typeext.Enclosures `json:"enclosures"`
	CreatedAt       time.Time          `json:"createdAt"`
	UpdatedAt       time.Time          `json:"updatedAt"`
}

func (q *Queries) ListUserLikesByUser(ctx context.Context, arg ListUserLikesByUserParams) ([]ListUserLikesByUserRow, error) {
	rows, err := q.db.Query(ctx, listUserLikesByUser, arg.UserID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListUserLikesByUserRow
	for rows.Next() {
		var i ListUserLikesByUserRow
		if err := rows.Scan(
			&i.UserID,
			&i.ItemID,
			&i.LikedAt,
			&i.ID,
			&i.FeedID,
			&i.Title,
			&i.Description,
			&i.Content,
			&i.Link,
			&i.Links,
			&i.UpdatedParsed,
			&i.PublishedParsed,
			&i.Authors,
			&i.Guid,
			&i.Image,
			&i.Categories,
			&i.Enclosures,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
