// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: suggested.sql

package repository

import (
	"context"
	"time"

	"github.com/google/uuid"
	gofeed "github.com/mmcdole/gofeed"
	typeext "github.com/rhajizada/gazette/internal/typeext"
)

const countSuggestedItemsByUser = `-- name: CountSuggestedItemsByUser :one
SELECT COUNT(*)::bigint AS total
FROM (
  SELECT i.id
  FROM items AS i
  JOIN item_embeddings AS e ON e.item_id = i.id
  JOIN user_embedding_clusters AS c ON c.user_id = $1
  WHERE i.published_parsed >= NOW() - INTERVAL '90 days'
    AND NOT EXISTS (
      SELECT 1
      FROM user_likes ul
      WHERE ul.user_id = $1 AND ul.item_id = i.id
    )
  GROUP BY i.id
) AS suggestions
`

func (q *Queries) CountSuggestedItemsByUser(ctx context.Context, userID uuid.UUID) (int64, error) {
	row := q.db.QueryRow(ctx, countSuggestedItemsByUser, userID)
	var total int64
	err := row.Scan(&total)
	return total, err
}

const listSuggestedItemsByUser = `-- name: ListSuggestedItemsByUser :many
SELECT
  i.id,
  i.feed_id,
  i.title,
  i.description,
  i.content,
  i.link,
  i.links,
  i.updated_parsed,
  i.published_parsed,
  i.authors,
  i.guid,
  i.image,
  i.categories,
  i.enclosures,
  i.created_at,
  i.updated_at,
  (1.0 - MIN(e.embedding <=> c.centroid))::double precision AS similarity,
  EXP(
    - (LN(2)::double precision / 7.0)
      * (EXTRACT(EPOCH FROM NOW() - i.published_parsed) / 86400.0)
  )::double precision AS freshness,
  (
    (1.0 - MIN(e.embedding <=> c.centroid))
      * EXP(
          - (LN(2)::double precision / 7.0)
            * (EXTRACT(EPOCH FROM NOW() - i.published_parsed) / 86400.0)
        )
  )::double precision AS score
FROM items AS i
JOIN item_embeddings AS e ON e.item_id = i.id
JOIN user_embedding_clusters AS c ON c.user_id = $1
WHERE i.published_parsed >= NOW() - INTERVAL '90 days'
  AND NOT EXISTS (
    SELECT 1
    FROM user_likes ul
    WHERE ul.user_id = $1 AND ul.item_id = i.id
  )
GROUP BY
  i.id,
  i.feed_id,
  i.title,
  i.description,
  i.content,
  i.link,
  i.links,
  i.updated_parsed,
  i.published_parsed,
  i.authors,
  i.guid,
  i.image,
  i.categories,
  i.enclosures,
  i.created_at,
  i.updated_at
ORDER BY score DESC
LIMIT  $2
OFFSET $3
`

type ListSuggestedItemsByUserParams struct {
	UserID uuid.UUID `json:"userId"`
	Limit  int32     `json:"limit"`
	Offset int32     `json:"offset"`
}

type ListSuggestedItemsByUserRow struct {
	ID              uuid.UUID          `json:"id"`
	FeedID          uuid.UUID          `json:"feedId"`
	Title           *string            `json:"title"`
	Description     *string            `json:"description"`
	Content         *string            `json:"content"`
	Link            string             `json:"link"`
	Links           []string           `json:"links"`
	UpdatedParsed   *time.Time         `json:"updatedParsed"`
	PublishedParsed *time.Time         `json:"publishedParsed"`
	Authors         typeext.Authors    `json:"authors"`
	Guid            *string            `json:"guid"`
	Image           *gofeed.Image      `json:"image"`
	Categories      []string           `json:"categories"`
	Enclosures      typeext.Enclosures `json:"enclosures"`
	CreatedAt       time.Time          `json:"createdAt"`
	UpdatedAt       time.Time          `json:"updatedAt"`
	Similarity      float64            `json:"similarity"`
	Freshness       float64            `json:"freshness"`
	Score           float64            `json:"score"`
}

func (q *Queries) ListSuggestedItemsByUser(ctx context.Context, arg ListSuggestedItemsByUserParams) ([]ListSuggestedItemsByUserRow, error) {
	rows, err := q.db.Query(ctx, listSuggestedItemsByUser, arg.UserID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListSuggestedItemsByUserRow
	for rows.Next() {
		var i ListSuggestedItemsByUserRow
		if err := rows.Scan(
			&i.ID,
			&i.FeedID,
			&i.Title,
			&i.Description,
			&i.Content,
			&i.Link,
			&i.Links,
			&i.UpdatedParsed,
			&i.PublishedParsed,
			&i.Authors,
			&i.Guid,
			&i.Image,
			&i.Categories,
			&i.Enclosures,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Similarity,
			&i.Freshness,
			&i.Score,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
