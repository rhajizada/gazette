// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: categories.sql

package repository

import (
	"context"
	"time"

	"github.com/google/uuid"
	gofeed "github.com/mmcdole/gofeed"
	typeext "github.com/rhajizada/gazette/internal/typeext"
)

const countDistinctCategories = `-- name: CountDistinctCategories :one
SELECT
  COUNT(DISTINCT category) AS unique_category_count
FROM items
CROSS JOIN LATERAL unnest(categories) AS category
`

func (q *Queries) CountDistinctCategories(ctx context.Context) (int64, error) {
	row := q.db.QueryRow(ctx, countDistinctCategories)
	var unique_category_count int64
	err := row.Scan(&unique_category_count)
	return unique_category_count, err
}

const countItemsByCategoryForUser = `-- name: CountItemsByCategoryForUser :one

SELECT
  COUNT(*) AS count
FROM items i
WHERE
  i.categories @> $1
`

// number of categories to skip
func (q *Queries) CountItemsByCategoryForUser(ctx context.Context, categories []string) (int64, error) {
	row := q.db.QueryRow(ctx, countItemsByCategoryForUser, categories)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const listDistinctCategories = `-- name: ListDistinctCategories :many
SELECT DISTINCT category
FROM items
CROSS JOIN LATERAL unnest(categories) AS category
ORDER BY category ASC
LIMIT  $1  -- max number of categories to return
OFFSET $2
`

type ListDistinctCategoriesParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListDistinctCategories(ctx context.Context, arg ListDistinctCategoriesParams) ([]interface{}, error) {
	rows, err := q.db.Query(ctx, listDistinctCategories, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []interface{}
	for rows.Next() {
		var category interface{}
		if err := rows.Scan(&category); err != nil {
			return nil, err
		}
		items = append(items, category)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listItemsByCategoryForUser = `-- name: ListItemsByCategoryForUser :many
SELECT
  i.id,
  i.feed_id,
  i.title,
  i.description,
  i.content,
  i.link,
  i.links,
  i.updated_parsed,
  i.published_parsed,
  i.authors,
  i.guid,
  i.image,
  i.categories,
  i.enclosures,
  i.created_at,
  i.updated_at,
  (ul.user_id IS NOT NULL) AS liked,
  ul.liked_at
FROM items i
LEFT JOIN user_likes ul
  ON ul.item_id = i.id
  AND ul.user_id  = $2
WHERE
  i.categories @> $1
ORDER BY
  i.published_parsed DESC
LIMIT  $3
OFFSET $4
`

type ListItemsByCategoryForUserParams struct {
	Categories []string  `json:"categories"`
	UserID     uuid.UUID `json:"userId"`
	Limit      int32     `json:"limit"`
	Offset     int32     `json:"offset"`
}

type ListItemsByCategoryForUserRow struct {
	ID              uuid.UUID          `json:"id"`
	FeedID          uuid.UUID          `json:"feedId"`
	Title           *string            `json:"title"`
	Description     *string            `json:"description"`
	Content         *string            `json:"content"`
	Link            string             `json:"link"`
	Links           []string           `json:"links"`
	UpdatedParsed   *time.Time         `json:"updatedParsed"`
	PublishedParsed *time.Time         `json:"publishedParsed"`
	Authors         typeext.Authors    `json:"authors"`
	Guid            *string            `json:"guid"`
	Image           *gofeed.Image      `json:"image"`
	Categories      []string           `json:"categories"`
	Enclosures      typeext.Enclosures `json:"enclosures"`
	CreatedAt       time.Time          `json:"createdAt"`
	UpdatedAt       time.Time          `json:"updatedAt"`
	Liked           interface{}        `json:"liked"`
	LikedAt         *time.Time         `json:"likedAt"`
}

func (q *Queries) ListItemsByCategoryForUser(ctx context.Context, arg ListItemsByCategoryForUserParams) ([]ListItemsByCategoryForUserRow, error) {
	rows, err := q.db.Query(ctx, listItemsByCategoryForUser,
		arg.Categories,
		arg.UserID,
		arg.Limit,
		arg.Offset,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListItemsByCategoryForUserRow
	for rows.Next() {
		var i ListItemsByCategoryForUserRow
		if err := rows.Scan(
			&i.ID,
			&i.FeedID,
			&i.Title,
			&i.Description,
			&i.Content,
			&i.Link,
			&i.Links,
			&i.UpdatedParsed,
			&i.PublishedParsed,
			&i.Authors,
			&i.Guid,
			&i.Image,
			&i.Categories,
			&i.Enclosures,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Liked,
			&i.LikedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
