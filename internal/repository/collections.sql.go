// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: collections.sql

package repository

import (
	"context"

	"github.com/google/uuid"
)

const createCollection = `-- name: CreateCollection :one
INSERT INTO collections (user_id, name)
VALUES ($1, $2)
RETURNING id, user_id, name, created_at, last_updated
`

type CreateCollectionParams struct {
	UserID uuid.UUID `json:"userId"`
	Name   string    `json:"name"`
}

func (q *Queries) CreateCollection(ctx context.Context, arg CreateCollectionParams) (Collection, error) {
	row := q.db.QueryRow(ctx, createCollection, arg.UserID, arg.Name)
	var i Collection
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Name,
		&i.CreatedAt,
		&i.LastUpdated,
	)
	return i, err
}

const deleteCollectionByID = `-- name: DeleteCollectionByID :exec
DELETE FROM collections
WHERE id = $1
`

func (q *Queries) DeleteCollectionByID(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteCollectionByID, id)
	return err
}

const getCollectionByID = `-- name: GetCollectionByID :one
SELECT id, user_id, name, created_at, last_updated
FROM collections
WHERE id = $1
`

func (q *Queries) GetCollectionByID(ctx context.Context, id uuid.UUID) (Collection, error) {
	row := q.db.QueryRow(ctx, getCollectionByID, id)
	var i Collection
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Name,
		&i.CreatedAt,
		&i.LastUpdated,
	)
	return i, err
}

const listCollectionsByUser = `-- name: ListCollectionsByUser :many
SELECT id, user_id, name, created_at, last_updated
FROM collections
WHERE user_id = $1
ORDER BY created_at DESC
LIMIT  $2
OFFSET $3
`

type ListCollectionsByUserParams struct {
	UserID uuid.UUID `json:"userId"`
	Limit  int32     `json:"limit"`
	Offset int32     `json:"offset"`
}

func (q *Queries) ListCollectionsByUser(ctx context.Context, arg ListCollectionsByUserParams) ([]Collection, error) {
	rows, err := q.db.Query(ctx, listCollectionsByUser, arg.UserID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Collection
	for rows.Next() {
		var i Collection
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Name,
			&i.CreatedAt,
			&i.LastUpdated,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateCollectionByID = `-- name: UpdateCollectionByID :one
UPDATE collections
SET name         = $2,
    last_updated = now()
WHERE id = $1
RETURNING id, user_id, name, created_at, last_updated
`

type UpdateCollectionByIDParams struct {
	ID   uuid.UUID `json:"id"`
	Name string    `json:"name"`
}

func (q *Queries) UpdateCollectionByID(ctx context.Context, arg UpdateCollectionByIDParams) (Collection, error) {
	row := q.db.QueryRow(ctx, updateCollectionByID, arg.ID, arg.Name)
	var i Collection
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Name,
		&i.CreatedAt,
		&i.LastUpdated,
	)
	return i, err
}
