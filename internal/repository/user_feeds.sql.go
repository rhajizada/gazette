// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: user_feeds.sql

package repository

import (
	"context"

	"github.com/google/uuid"
)

const createUserFeedSubscription = `-- name: CreateUserFeedSubscription :one
INSERT INTO user_feeds (user_id, feed_id)
VALUES ($1, $2)
RETURNING user_id, feed_id, subscribed_at
`

type CreateUserFeedSubscriptionParams struct {
	UserID uuid.UUID `json:"userId"`
	FeedID uuid.UUID `json:"feedId"`
}

func (q *Queries) CreateUserFeedSubscription(ctx context.Context, arg CreateUserFeedSubscriptionParams) (UserFeed, error) {
	row := q.db.QueryRow(ctx, createUserFeedSubscription, arg.UserID, arg.FeedID)
	var i UserFeed
	err := row.Scan(&i.UserID, &i.FeedID, &i.SubscribedAt)
	return i, err
}

const deleteUserFeedSubscription = `-- name: DeleteUserFeedSubscription :exec
DELETE FROM user_feeds
WHERE user_id = $1
  AND feed_id = $2
`

type DeleteUserFeedSubscriptionParams struct {
	UserID uuid.UUID `json:"userId"`
	FeedID uuid.UUID `json:"feedId"`
}

func (q *Queries) DeleteUserFeedSubscription(ctx context.Context, arg DeleteUserFeedSubscriptionParams) error {
	_, err := q.db.Exec(ctx, deleteUserFeedSubscription, arg.UserID, arg.FeedID)
	return err
}

const getUserFeedSubscription = `-- name: GetUserFeedSubscription :one
SELECT user_id, feed_id, subscribed_at
FROM user_feeds
WHERE user_id = $1
  AND feed_id = $2
`

type GetUserFeedSubscriptionParams struct {
	UserID uuid.UUID `json:"userId"`
	FeedID uuid.UUID `json:"feedId"`
}

func (q *Queries) GetUserFeedSubscription(ctx context.Context, arg GetUserFeedSubscriptionParams) (UserFeed, error) {
	row := q.db.QueryRow(ctx, getUserFeedSubscription, arg.UserID, arg.FeedID)
	var i UserFeed
	err := row.Scan(&i.UserID, &i.FeedID, &i.SubscribedAt)
	return i, err
}

const listUserFeedSubscriptions = `-- name: ListUserFeedSubscriptions :many
SELECT user_id, feed_id, subscribed_at
FROM user_feeds
WHERE user_id = $1
ORDER BY subscribed_at DESC
LIMIT  $2
OFFSET $3
`

type ListUserFeedSubscriptionsParams struct {
	UserID uuid.UUID `json:"userId"`
	Limit  int32     `json:"limit"`
	Offset int32     `json:"offset"`
}

func (q *Queries) ListUserFeedSubscriptions(ctx context.Context, arg ListUserFeedSubscriptionsParams) ([]UserFeed, error) {
	rows, err := q.db.Query(ctx, listUserFeedSubscriptions, arg.UserID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []UserFeed
	for rows.Next() {
		var i UserFeed
		if err := rows.Scan(&i.UserID, &i.FeedID, &i.SubscribedAt); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
