// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: collection_embedding_clusters.sql

package repository

import (
	"context"

	"github.com/google/uuid"
	"github.com/pgvector/pgvector-go"
)

const createCollectionEmbeddingCluster = `-- name: CreateCollectionEmbeddingCluster :one
INSERT INTO collection_embedding_clusters (collection_id, cluster_id, centroid, member_count)
VALUES ($1, $2, $3, $4)
RETURNING
  collection_id,
  cluster_id,
  centroid,
  member_count,
  created_at,
  updated_at
`

type CreateCollectionEmbeddingClusterParams struct {
	CollectionID uuid.UUID        `json:"collectionId"`
	ClusterID    int32            `json:"clusterId"`
	Centroid     *pgvector.Vector `json:"centroid"`
	MemberCount  int32            `json:"memberCount"`
}

func (q *Queries) CreateCollectionEmbeddingCluster(ctx context.Context, arg CreateCollectionEmbeddingClusterParams) (CollectionEmbeddingCluster, error) {
	row := q.db.QueryRow(ctx, createCollectionEmbeddingCluster,
		arg.CollectionID,
		arg.ClusterID,
		arg.Centroid,
		arg.MemberCount,
	)
	var i CollectionEmbeddingCluster
	err := row.Scan(
		&i.CollectionID,
		&i.ClusterID,
		&i.Centroid,
		&i.MemberCount,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteCollectionEmbeddingCluster = `-- name: DeleteCollectionEmbeddingCluster :exec
DELETE FROM collection_embedding_clusters
WHERE collection_id = $1 AND cluster_id = $2
`

type DeleteCollectionEmbeddingClusterParams struct {
	CollectionID uuid.UUID `json:"collectionId"`
	ClusterID    int32     `json:"clusterId"`
}

func (q *Queries) DeleteCollectionEmbeddingCluster(ctx context.Context, arg DeleteCollectionEmbeddingClusterParams) error {
	_, err := q.db.Exec(ctx, deleteCollectionEmbeddingCluster, arg.CollectionID, arg.ClusterID)
	return err
}

const getCollectionEmbeddingCluster = `-- name: GetCollectionEmbeddingCluster :one
SELECT
  collection_id,
  cluster_id,
  centroid,
  member_count,
  created_at,
  updated_at
FROM collection_embedding_clusters
WHERE collection_id = $1 AND cluster_id = $2
`

type GetCollectionEmbeddingClusterParams struct {
	CollectionID uuid.UUID `json:"collectionId"`
	ClusterID    int32     `json:"clusterId"`
}

func (q *Queries) GetCollectionEmbeddingCluster(ctx context.Context, arg GetCollectionEmbeddingClusterParams) (CollectionEmbeddingCluster, error) {
	row := q.db.QueryRow(ctx, getCollectionEmbeddingCluster, arg.CollectionID, arg.ClusterID)
	var i CollectionEmbeddingCluster
	err := row.Scan(
		&i.CollectionID,
		&i.ClusterID,
		&i.Centroid,
		&i.MemberCount,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getCollectionEmbeddingClustersByCollectionID = `-- name: GetCollectionEmbeddingClustersByCollectionID :many
SELECT
  collection_id,
  cluster_id,
  centroid,
  member_count,
  created_at,
  updated_at
FROM collection_embedding_clusters
WHERE collection_id = $1
ORDER BY cluster_id
`

func (q *Queries) GetCollectionEmbeddingClustersByCollectionID(ctx context.Context, collectionID uuid.UUID) ([]CollectionEmbeddingCluster, error) {
	rows, err := q.db.Query(ctx, getCollectionEmbeddingClustersByCollectionID, collectionID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []CollectionEmbeddingCluster
	for rows.Next() {
		var i CollectionEmbeddingCluster
		if err := rows.Scan(
			&i.CollectionID,
			&i.ClusterID,
			&i.Centroid,
			&i.MemberCount,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateCollectionEmbeddingCluster = `-- name: UpdateCollectionEmbeddingCluster :one
UPDATE collection_embedding_clusters
SET
  centroid     = $3,
  member_count = $4,
  updated_at   = now()
WHERE collection_id = $1 AND cluster_id = $2
RETURNING
  collection_id,
  cluster_id,
  centroid,
  member_count,
  created_at,
  updated_at
`

type UpdateCollectionEmbeddingClusterParams struct {
	CollectionID uuid.UUID        `json:"collectionId"`
	ClusterID    int32            `json:"clusterId"`
	Centroid     *pgvector.Vector `json:"centroid"`
	MemberCount  int32            `json:"memberCount"`
}

func (q *Queries) UpdateCollectionEmbeddingCluster(ctx context.Context, arg UpdateCollectionEmbeddingClusterParams) (CollectionEmbeddingCluster, error) {
	row := q.db.QueryRow(ctx, updateCollectionEmbeddingCluster,
		arg.CollectionID,
		arg.ClusterID,
		arg.Centroid,
		arg.MemberCount,
	)
	var i CollectionEmbeddingCluster
	err := row.Scan(
		&i.CollectionID,
		&i.ClusterID,
		&i.Centroid,
		&i.MemberCount,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
