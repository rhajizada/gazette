// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: users.sql

package repository

import (
	"context"

	"github.com/google/uuid"
)

const countUsers = `-- name: CountUsers :one
SELECT COUNT(*) AS count
FROM users
`

func (q *Queries) CountUsers(ctx context.Context) (int64, error) {
	row := q.db.QueryRow(ctx, countUsers)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createUser = `-- name: CreateUser :one
INSERT INTO users (sub, name, email)
VALUES ($1, $2, $3)
RETURNING
  id, sub, name, email, created_at, last_updated_at
`

type CreateUserParams struct {
	Sub   string `json:"sub"`
	Name  string `json:"name"`
	Email string `json:"email"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, createUser, arg.Sub, arg.Name, arg.Email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Sub,
		&i.Name,
		&i.Email,
		&i.CreatedAt,
		&i.LastUpdatedAt,
	)
	return i, err
}

const deleteUserByID = `-- name: DeleteUserByID :exec
DELETE FROM users
WHERE id = $1
`

func (q *Queries) DeleteUserByID(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteUserByID, id)
	return err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT
  id, sub, name, email, created_at, last_updated_at
FROM users
WHERE email = $1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRow(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Sub,
		&i.Name,
		&i.Email,
		&i.CreatedAt,
		&i.LastUpdatedAt,
	)
	return i, err
}

const getUserByID = `-- name: GetUserByID :one
SELECT
  id, sub, name, email, created_at, last_updated_at
FROM users
WHERE id = $1
`

func (q *Queries) GetUserByID(ctx context.Context, id uuid.UUID) (User, error) {
	row := q.db.QueryRow(ctx, getUserByID, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Sub,
		&i.Name,
		&i.Email,
		&i.CreatedAt,
		&i.LastUpdatedAt,
	)
	return i, err
}

const getUserBySub = `-- name: GetUserBySub :one
SELECT
  id, sub, name, email, created_at, last_updated_at
FROM users
WHERE sub = $1
`

func (q *Queries) GetUserBySub(ctx context.Context, sub string) (User, error) {
	row := q.db.QueryRow(ctx, getUserBySub, sub)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Sub,
		&i.Name,
		&i.Email,
		&i.CreatedAt,
		&i.LastUpdatedAt,
	)
	return i, err
}

const listUsers = `-- name: ListUsers :many
SELECT
  id, sub, name, email, created_at, last_updated_at
FROM users
ORDER BY created_at DESC
LIMIT  $1
OFFSET $2
`

type ListUsersParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListUsers(ctx context.Context, arg ListUsersParams) ([]User, error) {
	rows, err := q.db.Query(ctx, listUsers, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Sub,
			&i.Name,
			&i.Email,
			&i.CreatedAt,
			&i.LastUpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUserByID = `-- name: UpdateUserByID :one
UPDATE users
SET
  sub             = $2,
  name            = $3,
  email           = $4,
  last_updated_at = now()
WHERE id = $1
RETURNING
  id, sub, name, email, created_at, last_updated_at
`

type UpdateUserByIDParams struct {
	ID    uuid.UUID `json:"id"`
	Sub   string    `json:"sub"`
	Name  string    `json:"name"`
	Email string    `json:"email"`
}

func (q *Queries) UpdateUserByID(ctx context.Context, arg UpdateUserByIDParams) (User, error) {
	row := q.db.QueryRow(ctx, updateUserByID,
		arg.ID,
		arg.Sub,
		arg.Name,
		arg.Email,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Sub,
		&i.Name,
		&i.Email,
		&i.CreatedAt,
		&i.LastUpdatedAt,
	)
	return i, err
}
