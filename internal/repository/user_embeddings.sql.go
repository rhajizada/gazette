// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: user_embeddings.sql

package repository

import (
	"context"

	"github.com/google/uuid"
	"github.com/pgvector/pgvector-go"
)

const createUserEmbedding = `-- name: CreateUserEmbedding :one
INSERT INTO user_embeddings (
  user_id,
  embedding
)
VALUES (
  $1,
  $2
)
RETURNING
  user_id,
  embedding,
  created_at,
  updated_at
`

type CreateUserEmbeddingParams struct {
	UserID    uuid.UUID        `json:"userId"`
	Embedding *pgvector.Vector `json:"embedding"`
}

func (q *Queries) CreateUserEmbedding(ctx context.Context, arg CreateUserEmbeddingParams) (UserEmbedding, error) {
	row := q.db.QueryRow(ctx, createUserEmbedding, arg.UserID, arg.Embedding)
	var i UserEmbedding
	err := row.Scan(
		&i.UserID,
		&i.Embedding,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteUserEmbedding = `-- name: DeleteUserEmbedding :exec
DELETE FROM user_embeddings
WHERE user_id = $1
`

func (q *Queries) DeleteUserEmbedding(ctx context.Context, userID uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteUserEmbedding, userID)
	return err
}

const getUserEmbedding = `-- name: GetUserEmbedding :one
SELECT
  user_id,
  embedding,
  created_at,
  updated_at
FROM user_embeddings
WHERE user_id = $1
`

func (q *Queries) GetUserEmbedding(ctx context.Context, userID uuid.UUID) (UserEmbedding, error) {
	row := q.db.QueryRow(ctx, getUserEmbedding, userID)
	var i UserEmbedding
	err := row.Scan(
		&i.UserID,
		&i.Embedding,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateUserEmbedding = `-- name: UpdateUserEmbedding :one
UPDATE user_embeddings
SET
  embedding  = $2,
  updated_at = now()
WHERE user_id = $1
RETURNING
  user_id,
  embedding,
  created_at,
  updated_at
`

type UpdateUserEmbeddingParams struct {
	UserID    uuid.UUID        `json:"userId"`
	Embedding *pgvector.Vector `json:"embedding"`
}

func (q *Queries) UpdateUserEmbedding(ctx context.Context, arg UpdateUserEmbeddingParams) (UserEmbedding, error) {
	row := q.db.QueryRow(ctx, updateUserEmbedding, arg.UserID, arg.Embedding)
	var i UserEmbedding
	err := row.Scan(
		&i.UserID,
		&i.Embedding,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
