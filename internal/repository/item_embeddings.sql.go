// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: item_embeddings.sql

package repository

import (
	"context"

	"github.com/google/uuid"
	"github.com/pgvector/pgvector-go"
)

const createItemEmbedding = `-- name: CreateItemEmbedding :one
INSERT INTO item_embeddings (
  item_id,
  embedding
)
VALUES (
  $1,
  $2
)
RETURNING
  item_id,
  embedding,
  created_at,
  updated_at
`

type CreateItemEmbeddingParams struct {
	ItemID    uuid.UUID        `json:"itemId"`
	Embedding *pgvector.Vector `json:"embedding"`
}

func (q *Queries) CreateItemEmbedding(ctx context.Context, arg CreateItemEmbeddingParams) (ItemEmbedding, error) {
	row := q.db.QueryRow(ctx, createItemEmbedding, arg.ItemID, arg.Embedding)
	var i ItemEmbedding
	err := row.Scan(
		&i.ItemID,
		&i.Embedding,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteItemEmbeddingByID = `-- name: DeleteItemEmbeddingByID :exec
DELETE FROM item_embeddings
WHERE item_id = $1
`

func (q *Queries) DeleteItemEmbeddingByID(ctx context.Context, itemID uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteItemEmbeddingByID, itemID)
	return err
}

const getItemEmbeddingByID = `-- name: GetItemEmbeddingByID :one
SELECT
  item_id,
  embedding,
  created_at,
  updated_at
FROM item_embeddings
WHERE item_id = $1
`

func (q *Queries) GetItemEmbeddingByID(ctx context.Context, itemID uuid.UUID) (ItemEmbedding, error) {
	row := q.db.QueryRow(ctx, getItemEmbeddingByID, itemID)
	var i ItemEmbedding
	err := row.Scan(
		&i.ItemID,
		&i.Embedding,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateItemEmbeddingByID = `-- name: UpdateItemEmbeddingByID :one
UPDATE item_embeddings
SET
  embedding  = $2,
  updated_at = now()
WHERE item_id = $1
RETURNING
  item_id,
  embedding,
  created_at,
  updated_at
`

type UpdateItemEmbeddingByIDParams struct {
	ItemID    uuid.UUID        `json:"itemId"`
	Embedding *pgvector.Vector `json:"embedding"`
}

func (q *Queries) UpdateItemEmbeddingByID(ctx context.Context, arg UpdateItemEmbeddingByIDParams) (ItemEmbedding, error) {
	row := q.db.QueryRow(ctx, updateItemEmbeddingByID, arg.ItemID, arg.Embedding)
	var i ItemEmbedding
	err := row.Scan(
		&i.ItemID,
		&i.Embedding,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
