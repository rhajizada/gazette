// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: subscribed.sql

package repository

import (
	"context"
	"time"

	"github.com/google/uuid"
	gofeed "github.com/mmcdole/gofeed"
	typeext "github.com/rhajizada/gazette/internal/typeext"
)

const countSubscribedItemsByUser = `-- name: CountSubscribedItemsByUser :one
SELECT
  COUNT(*)::bigint AS total
FROM items AS i
JOIN user_feeds AS fs
  ON fs.feed_id = i.feed_id
WHERE fs.user_id = $1
  AND i.published_parsed >= NOW() - INTERVAL '30 days'
`

func (q *Queries) CountSubscribedItemsByUser(ctx context.Context, userID uuid.UUID) (int64, error) {
	row := q.db.QueryRow(ctx, countSubscribedItemsByUser, userID)
	var total int64
	err := row.Scan(&total)
	return total, err
}

const listSubscribedItemsByUser = `-- name: ListSubscribedItemsByUser :many
SELECT
  i.id,
  i.feed_id,
  i.title,
  i.description,
  i.content,
  i.link,
  i.links,
  i.updated_parsed,
  i.published_parsed,
  i.authors,
  i.guid,
  i.image,
  i.categories,
  i.enclosures,
  i.created_at,
  i.updated_at,
  ul.item_id IS NOT NULL AS liked,
  ul.liked_at AS liked_at
FROM items AS i
JOIN user_feeds AS fs
  ON fs.feed_id = i.feed_id
LEFT JOIN user_likes AS ul
  ON ul.item_id = i.id AND ul.user_id = $1
WHERE fs.user_id = $1
  AND i.published_parsed >= NOW() - INTERVAL '30 days'
ORDER BY i.published_parsed DESC
LIMIT  $2
OFFSET $3
`

type ListSubscribedItemsByUserParams struct {
	UserID uuid.UUID `json:"userId"`
	Limit  int32     `json:"limit"`
	Offset int32     `json:"offset"`
}

type ListSubscribedItemsByUserRow struct {
	ID              uuid.UUID          `json:"id"`
	FeedID          uuid.UUID          `json:"feedId"`
	Title           *string            `json:"title"`
	Description     *string            `json:"description"`
	Content         *string            `json:"content"`
	Link            string             `json:"link"`
	Links           []string           `json:"links"`
	UpdatedParsed   *time.Time         `json:"updatedParsed"`
	PublishedParsed *time.Time         `json:"publishedParsed"`
	Authors         typeext.Authors    `json:"authors"`
	Guid            *string            `json:"guid"`
	Image           *gofeed.Image      `json:"image"`
	Categories      []string           `json:"categories"`
	Enclosures      typeext.Enclosures `json:"enclosures"`
	CreatedAt       time.Time          `json:"createdAt"`
	UpdatedAt       time.Time          `json:"updatedAt"`
	Liked           interface{}        `json:"liked"`
	LikedAt         *time.Time         `json:"likedAt"`
}

func (q *Queries) ListSubscribedItemsByUser(ctx context.Context, arg ListSubscribedItemsByUserParams) ([]ListSubscribedItemsByUserRow, error) {
	rows, err := q.db.Query(ctx, listSubscribedItemsByUser, arg.UserID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListSubscribedItemsByUserRow
	for rows.Next() {
		var i ListSubscribedItemsByUserRow
		if err := rows.Scan(
			&i.ID,
			&i.FeedID,
			&i.Title,
			&i.Description,
			&i.Content,
			&i.Link,
			&i.Links,
			&i.UpdatedParsed,
			&i.PublishedParsed,
			&i.Authors,
			&i.Guid,
			&i.Image,
			&i.Categories,
			&i.Enclosures,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Liked,
			&i.LikedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
