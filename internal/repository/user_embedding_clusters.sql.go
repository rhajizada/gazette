// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: user_embedding_clusters.sql

package repository

import (
	"context"

	"github.com/google/uuid"
	"github.com/pgvector/pgvector-go"
)

const createUserEmbeddingCluster = `-- name: CreateUserEmbeddingCluster :one
INSERT INTO user_embedding_clusters (user_id, cluster_id, centroid, member_count)
VALUES ($1, $2, $3, $4)
RETURNING
  user_id,
  cluster_id,
  centroid,
  member_count,
  created_at,
  updated_at
`

type CreateUserEmbeddingClusterParams struct {
	UserID      uuid.UUID        `json:"userId"`
	ClusterID   int32            `json:"clusterId"`
	Centroid    *pgvector.Vector `json:"centroid"`
	MemberCount int32            `json:"memberCount"`
}

func (q *Queries) CreateUserEmbeddingCluster(ctx context.Context, arg CreateUserEmbeddingClusterParams) (UserEmbeddingCluster, error) {
	row := q.db.QueryRow(ctx, createUserEmbeddingCluster,
		arg.UserID,
		arg.ClusterID,
		arg.Centroid,
		arg.MemberCount,
	)
	var i UserEmbeddingCluster
	err := row.Scan(
		&i.UserID,
		&i.ClusterID,
		&i.Centroid,
		&i.MemberCount,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteUserEmbeddingCluster = `-- name: DeleteUserEmbeddingCluster :exec
DELETE FROM user_embedding_clusters
WHERE user_id = $1 AND cluster_id = $2
`

type DeleteUserEmbeddingClusterParams struct {
	UserID    uuid.UUID `json:"userId"`
	ClusterID int32     `json:"clusterId"`
}

func (q *Queries) DeleteUserEmbeddingCluster(ctx context.Context, arg DeleteUserEmbeddingClusterParams) error {
	_, err := q.db.Exec(ctx, deleteUserEmbeddingCluster, arg.UserID, arg.ClusterID)
	return err
}

const getUserEmbeddingCluster = `-- name: GetUserEmbeddingCluster :one
SELECT
  user_id,
  cluster_id,
  centroid,
  member_count,
  created_at,
  updated_at
FROM user_embedding_clusters
WHERE user_id = $1 AND cluster_id = $2
`

type GetUserEmbeddingClusterParams struct {
	UserID    uuid.UUID `json:"userId"`
	ClusterID int32     `json:"clusterId"`
}

func (q *Queries) GetUserEmbeddingCluster(ctx context.Context, arg GetUserEmbeddingClusterParams) (UserEmbeddingCluster, error) {
	row := q.db.QueryRow(ctx, getUserEmbeddingCluster, arg.UserID, arg.ClusterID)
	var i UserEmbeddingCluster
	err := row.Scan(
		&i.UserID,
		&i.ClusterID,
		&i.Centroid,
		&i.MemberCount,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserEmbeddingClustersByUserID = `-- name: GetUserEmbeddingClustersByUserID :many
SELECT
  user_id,
  cluster_id,
  centroid,
  member_count,
  created_at,
  updated_at
FROM user_embedding_clusters
WHERE user_id = $1
ORDER BY cluster_id
`

func (q *Queries) GetUserEmbeddingClustersByUserID(ctx context.Context, userID uuid.UUID) ([]UserEmbeddingCluster, error) {
	rows, err := q.db.Query(ctx, getUserEmbeddingClustersByUserID, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []UserEmbeddingCluster
	for rows.Next() {
		var i UserEmbeddingCluster
		if err := rows.Scan(
			&i.UserID,
			&i.ClusterID,
			&i.Centroid,
			&i.MemberCount,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUserEmbeddingCluster = `-- name: UpdateUserEmbeddingCluster :one
UPDATE user_embedding_clusters
SET
  centroid     = $3,
  member_count = $4,
  updated_at   = now()
WHERE user_id = $1 AND cluster_id = $2
RETURNING
  user_id,
  cluster_id,
  centroid,
  member_count,
  created_at,
  updated_at
`

type UpdateUserEmbeddingClusterParams struct {
	UserID      uuid.UUID        `json:"userId"`
	ClusterID   int32            `json:"clusterId"`
	Centroid    *pgvector.Vector `json:"centroid"`
	MemberCount int32            `json:"memberCount"`
}

func (q *Queries) UpdateUserEmbeddingCluster(ctx context.Context, arg UpdateUserEmbeddingClusterParams) (UserEmbeddingCluster, error) {
	row := q.db.QueryRow(ctx, updateUserEmbeddingCluster,
		arg.UserID,
		arg.ClusterID,
		arg.Centroid,
		arg.MemberCount,
	)
	var i UserEmbeddingCluster
	err := row.Scan(
		&i.UserID,
		&i.ClusterID,
		&i.Centroid,
		&i.MemberCount,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
